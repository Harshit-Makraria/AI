// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
 id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String   @unique @map("userId") @default(cuid())
  email    String   @unique
  name     String?
  password String
  chats    ChatUser[]
  messages Message[]
  createdAt DateTime @default(now())

}

model Chat {
  id       String      @id @default(uuid()) @map("_id") @db.ObjectId
  name      String?
  isGroup   Boolean     @default(false)
  users     ChatUser[]
  messages  Message[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model ChatUser {
  id       String   @id @default(uuid()) @map("_id") @db.ObjectId
  userId   String   @db.ObjectId
  chatId   String   @db.ObjectId
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat     Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model Message {
  id        String   @id @default(uuid()) @map("_id") @db.ObjectId
  text      String
  senderId  String   @db.ObjectId
  chatId    String   @db.ObjectId
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}
